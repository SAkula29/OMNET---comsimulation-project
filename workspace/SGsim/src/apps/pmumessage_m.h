//
// Generated file, do not edit! Created by opp_msgc 4.4 from apps/pmumessage.msg.
//

#ifndef _PMUMESSAGE_M_H_
#define _PMUMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>apps/pmumessage.msg</tt> by opp_msgc.
 * <pre>
 * packet pmumessage
 * {
 *     string pmuID;
 *     double timeStep;
 * 	unsigned char data_frm[1024];
 * 	int pmusize;
 * 	simtime_t ctime;
 *     int source;
 *     int destination;
 * 	int hops=0;
 * }
 * </pre>
 */
class pmumessage : public ::cPacket
{
  protected:
    opp_string pmuID_var;
    double timeStep_var;
    unsigned char data_frm_var[1024];
    int pmusize_var;
    simtime_t ctime_var;
    int source_var;
    int destination_var;
    int hops_var;

  private:
    void copy(const pmumessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const pmumessage&);

  public:
    pmumessage(const char *name=NULL, int kind=0);
    pmumessage(const pmumessage& other);
    virtual ~pmumessage();
    pmumessage& operator=(const pmumessage& other);
    virtual pmumessage *dup() const {return new pmumessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getPmuID() const;
    virtual void setPmuID(const char * pmuID);
    virtual double getTimeStep() const;
    virtual void setTimeStep(double timeStep);
    virtual unsigned int getData_frmArraySize() const;
    virtual unsigned char getData_frm(unsigned int k) const;
    virtual void setData_frm(unsigned int k, unsigned char data_frm);
    virtual int getPmusize() const;
    virtual void setPmusize(int pmusize);
    virtual simtime_t getCtime() const;
    virtual void setCtime(simtime_t ctime);
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual int getHops() const;
    virtual void setHops(int hops);
};

inline void doPacking(cCommBuffer *b, pmumessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, pmumessage& obj) {obj.parsimUnpack(b);}


#endif // _PMUMESSAGE_M_H_
