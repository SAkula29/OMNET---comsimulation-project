//
// Generated file, do not edit! Created by opp_msgc 4.4 from apps/PMUValues.msg.
//

#ifndef _PMUVALUES_M_H_
#define _PMUVALUES_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>apps/PMUValues.msg</tt> by opp_msgc.
 * <pre>
 * message PMUValues
 * {
 *     simtime_t ctime;
 *     string pmuID;
 * 	int iD;
 *     double timeStep;
 *     double voltageValue1;
 *     double voltageAngle1;
 *     double voltageValue2;
 *     double voltageAngle2;
 *     double voltageValue3;
 *     double voltageAngle3;
 *     double currentValue1;
 *     double currentAngle1;
 *     double currentValue2;
 *     double currentAngle2;
 *     double currentValue3;
 *     double currentAngle3;
 *      
 * }
 * </pre>
 */
class PMUValues : public ::cMessage
{
  protected:
    simtime_t ctime_var;
    opp_string pmuID_var;
    int iD_var;
    double timeStep_var;
    double voltageValue1_var;
    double voltageAngle1_var;
    double voltageValue2_var;
    double voltageAngle2_var;
    double voltageValue3_var;
    double voltageAngle3_var;
    double currentValue1_var;
    double currentAngle1_var;
    double currentValue2_var;
    double currentAngle2_var;
    double currentValue3_var;
    double currentAngle3_var;

  private:
    void copy(const PMUValues& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PMUValues&);

  public:
    PMUValues(const char *name=NULL, int kind=0);
    PMUValues(const PMUValues& other);
    virtual ~PMUValues();
    PMUValues& operator=(const PMUValues& other);
    virtual PMUValues *dup() const {return new PMUValues(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual simtime_t getCtime() const;
    virtual void setCtime(simtime_t ctime);
    virtual const char * getPmuID() const;
    virtual void setPmuID(const char * pmuID);
    virtual int getID() const;
    virtual void setID(int iD);
    virtual double getTimeStep() const;
    virtual void setTimeStep(double timeStep);
    virtual double getVoltageValue1() const;
    virtual void setVoltageValue1(double voltageValue1);
    virtual double getVoltageAngle1() const;
    virtual void setVoltageAngle1(double voltageAngle1);
    virtual double getVoltageValue2() const;
    virtual void setVoltageValue2(double voltageValue2);
    virtual double getVoltageAngle2() const;
    virtual void setVoltageAngle2(double voltageAngle2);
    virtual double getVoltageValue3() const;
    virtual void setVoltageValue3(double voltageValue3);
    virtual double getVoltageAngle3() const;
    virtual void setVoltageAngle3(double voltageAngle3);
    virtual double getCurrentValue1() const;
    virtual void setCurrentValue1(double currentValue1);
    virtual double getCurrentAngle1() const;
    virtual void setCurrentAngle1(double currentAngle1);
    virtual double getCurrentValue2() const;
    virtual void setCurrentValue2(double currentValue2);
    virtual double getCurrentAngle2() const;
    virtual void setCurrentAngle2(double currentAngle2);
    virtual double getCurrentValue3() const;
    virtual void setCurrentValue3(double currentValue3);
    virtual double getCurrentAngle3() const;
    virtual void setCurrentAngle3(double currentAngle3);
};

inline void doPacking(cCommBuffer *b, PMUValues& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PMUValues& obj) {obj.parsimUnpack(b);}


#endif // _PMUVALUES_M_H_
